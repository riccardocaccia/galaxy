---
# Python 3 support
pip_virtualenv_command: /usr/bin/python3 -m venv # usegalaxy_eu.certbot, usegalaxy_eu.tiaas2, galaxyproject.galaxy
certbot_virtualenv_package_name: python3-virtualenv    # usegalaxy_eu.certbot
pip_package: python3-pip                               # geerlingguy.pip

# PostgreSQL
postgresql_objects_users:
  - name: galaxy
postgresql_objects_databases:
  - name: galaxy
    owner: galaxy

# PostgreSQL Backups
postgresql_backup_dir: /data/backups
postgresql_backup_local_dir: "{{ '~postgres' | expanduser }}/backups"

# Galaxy
galaxy_create_user: true # False by default, as e.g. you might have a 'galaxy' user provided by LDAP or AD.
galaxy_separate_privileges: true # Best practices for security, configuration is owned by 'root' (or a different user) than the processes
galaxy_manage_paths: true # False by default as your administrator might e.g. have root_squash enabled on NFS. Here we can create the directories so it's fine.
galaxy_layout: root-dir
galaxy_root: /srv/galaxy
galaxy_user: {name: galaxy, shell: /bin/bash}
galaxy_commit_id: release_23.0
galaxy_force_checkout: true
miniconda_prefix: "{{ galaxy_tool_dependency_dir }}/_conda"
miniconda_version: ''
miniconda_channels: ['conda-forge', 'defaults'] 
miniconda_manage_dependencies: false # # Uso esplicito per prevenire conflitti con il ruolo galaxyproject.galaxy
#
nginx_conf_user: galaxy
nginx_conf_group: galaxy
#

galaxy_config:
  galaxy:
    brand: "Mars ðŸš€"
    admin_users: 
    - riccardocaccia0@gmail.com
    database_connection: "postgresql:///galaxy?host=/var/run/postgresql"
    file_path: /data
    check_migrate_tools: false
    tool_data_path: "{{ galaxy_mutable_data_dir }}/tool-data"
    object_store_store_by: uuid
    id_secret: "{{ vault_id_secret }}" 
    job_config_file: "{{ galaxy_config_dir }}/job_conf.yml"
    # SQL Performance
    database_engine_option_server_side_cursors: true
    slow_query_log_threshold: 5
    enable_per_request_sql_debugging: true 
    # File serving Performance
    nginx_x_accel_redirect_base: /_x_accel_redirect
    # Automation / Ease of Use / User-facing features
    watch_job_rules: 'auto'
    allow_path_paste: true
    enable_quotas: true
    allow_user_deletion: true
    show_welcome_with_login: true
    expose_user_name: true
    expose_dataset_path: true
    expose_potentially_sensitive_job_metrics: true
    # NFS workarounds
    retry_job_output_collection: 3
    # Debugging
    cleanup_job: onsuccess
    allow_user_impersonation: true
    # Tool security
    outputs_to_working_directory: true
    # TUS
    tus_upload_store: /data/tus   

# --------BLOCCO GRAVITY------------
  gravity:
    #
    process_manager: systemd
    galaxy_user: galaxy
    galaxy_root: "{{ galaxy_root }}/server"
    virtualenv: "{{ galaxy_root }}/venv"
    #app_server: gunicorn 
    gunicorn:
      # listening options
      bind: "unix:/srv/galaxy/var/config/gunicorn.sock"
      #bind: "unix:{{ galaxy_mutable_config_dir }}/gunicorn.sock"
      # performance options
      workers: 2
      # Other options that will be passed to gunicorn
      extra_args: '--forwarded-allow-ips="*"'
      preload: true
    celery:
      concurrency: 2
      loglevel: DEBUG
    handlers:
      handler:
        processes: 3
        pools:
          - job-handler
          - workflow-scheduler
galaxy_config_templates:
  - src: templates/galaxy/config/job_conf.yml.j2
    dest: "{{ galaxy_config.galaxy.job_config_file }}"
  - src: templates/galaxy/config/welcome.html
    dest: "{{ galaxy_config_dir }}"
#  - src: templates/galaxy/config/reports.yml
#    dest: "{{ galaxy_reports_path }}"

# systemd
galaxy_manage_systemd: true

# Certbot
#certbot_auto_renew_hour: "{{ 23 |random(seed=inventory_hostname)  }}"
#certbot_auto_renew_minute: "{{ 59 |random(seed=inventory_hostname)  }}"
#certbot_auth_method: --webroot
#certbot_install_method: virtualenv
#certbot_auto_renew: yes
#certbot_auto_renew_user: root
#certbot_environment: staging
#certbot_well_known_root: /srv/nginx/_well-known_root
#
#certbot_share_key_users:
#  - nginx
#certbot_post_renewal: |
#    systemctl restart nginx || true
#certbot_domains:
#  - "{{ inventory_hostname }}"
#certbot_agree_tos: --agree-tos


# NGINX
nginx_selinux_allow_local_connections: true
nginx_servers:
#  - redirect-ssl
#nginx_ssl_servers:
   - galaxy
nginx_enable_default_server: false
nginx_conf_http:
  client_max_body_size: 1g
#  gzip: "on" # This is enabled by default in Ubuntu, and the duplicate directive will cause a crash.
  gzip_proxied: "any"
  gzip_static: "on"   # The ngx_http_gzip_static_module module allows sending precompressed files with the ".gz" filename extension instead of regular files.
  gzip_vary: "on"
  gzip_min_length: 128
  gzip_comp_level: 6  # Tradeoff of better compression for slightly more CPU time.
  gzip_types: |
      text/plain
      text/css
      text/xml
      text/javascript
      application/javascript
      application/x-javascript
      application/json
      application/xml
      application/xml+rss
      application/xhtml+xml
      application/x-font-ttf
      application/x-font-opentype
      image/png
      image/svg+xml
      image/x-icon
#nginx_ssl_role: usegalaxy_eu.certbot
#nginx_conf_ssl_certificate: "/etc/letsencrypt/live/{{ inventory_hostname }}/fullchain.pem"
#nginx_conf_ssl_certificate_key: "/etc/letsencrypt/live/{{ inventory_hostname }}/privkey.pem"
#nginx_conf_ssl_certificate: /etc/ssl/certs/fullchain.pem
# CRITICAL FIX: Usa il nome file generato dall'utente 'nginx'
#nginx_conf_ssl_certificate_key: /etc/ssl/user/privkey-nginx.pem

# TUS
galaxy_tusd_port: 1080
tusd_instances:
  - name: main
    user: "{{ galaxy_user.name }}"
    group: "galaxy"
    args:
      - "-host=localhost"
      - "-port={{ galaxy_tusd_port }}"
      - "-upload-dir={{ galaxy_config.galaxy.tus_upload_store }}"
      - "-hooks-http=https://{{ inventory_hostname }}/api/upload/hooks"
      - "-hooks-http-forward-headers=X-Api-Key,Cookie"
          
